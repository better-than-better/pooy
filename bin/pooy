#!/usr/bin/env node
const ora = require('ora');
const program = require('commander');
const chalk = require('chalk');
const { getIps } = require('../server/utils');
const pkg = require('../package.json');
const CONFIG = require('../config/index');
const start = require('../scripts/start');
const macProxyManager = require('../tools/mac-proxy-manager');
const checkUpdate = require('../tools/check-update');

process.env.POOY = {};

program
  .option('-g, --global', 'global mode')
  .option('-m, --manual', 'manual start')
  .option('-d, --debug', 'debug mode')
  .description('start proxy server')
  .action(async ({ global, manual, debug }) => {
    const spinner = ora('checking for updates...').start();
    const { needUpdate, version } = await checkUpdate();

    spinner.stop();

    if (needUpdate) {
      console.log('================================================================================================\n');
      console.log(chalk.cyan('        üçã an update is available for you, the latest version:'), chalk.bold.cyan(version.latest), chalk.yellow(`, current: ${version.current}`), '\n');
      console.log('                 ', 'try `' + chalk.yellow('npm update pooy -g') + '` to update', '\n');
      console.log('================================================================================================');
    } else {
      console.log('üç∑ already the latest version');
    }

    if (debug) {
      process.env.DEBUG = true;
    }

    start({ global, manual, debug }).then(() => {
      const IPv4 = getIps().IPv4;
      const proxyAddress =  `http://${IPv4}:${CONFIG.proxy_port}`;
      const clientAddress = `http://${IPv4}:${CONFIG.client_port}`;

      console.log('* pooy successfully started.');
      console.log(`* proxy server run at: ${chalk.bold.blue(proxyAddress)}`);
      console.log(`* proxy web ui see: ${chalk.bold.yellow(clientAddress)}`, '\n');
    }).catch(() => {
      console.log('fail to start');
    });
  });

program.version(pkg.version);

program.parse(process.argv);

process.on('SIGINT', () => {
  process.exit();
});

process.on('exit', () => {
  console.log(`\n\n ‚ö†Ô∏è Pooy has stoped.`);
  process.env.POOY.proxy_global && macProxyManager.clearWebProxy();
});